{"version":3,"file":"static/js/558.e8a8db13.chunk.js","mappings":"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","sources":["components/AddContactSection.tsx","components/Modal.tsx","redux/contacts/contacts-selectors.ts","components/ContactListSection.tsx","pages/Contacts.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  Heading,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Button,\n} from '@chakra-ui/react';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { useState } from 'react';\nimport { useAppDispatch } from 'redux/hooks';\nimport { InputEventType, SubmitFormEventType } from 'types/commonTypes';\n// import { useDispatch } from 'react-redux';\n\nconst AddContactSection: React.FC = () => {\n  const [phone, setPhone] = useState('');\n  const [name, setName] = useState('');\n\n  const dispatch = useAppDispatch();\n\n  const addContactHandler = (evt: SubmitFormEventType) => {\n    evt.preventDefault();\n    dispatch(addContact({ name, number: phone }));\n    setPhone('');\n    setName('');\n  };\n  return (\n    <Box flexGrow=\"1\" display=\"flex\" justifyContent=\"center\">\n      <Box\n        w=\"md\"\n        h=\"fit-content\"\n        borderRadius=\"lg\"\n        bg=\"gray.700\"\n        paddingY=\"5\"\n        paddingX=\"7\"\n      >\n        <Heading\n          as=\"h2\"\n          mb=\"6\"\n          textAlign=\"center\"\n          fontFamily=\"heading\"\n          fontWeight=\"medium\"\n        >\n          Add new contact\n        </Heading>\n        <form autoComplete=\"false\" onSubmit={addContactHandler}>\n          <FormControl isRequired>\n            <FormLabel>Number</FormLabel>\n            <Input\n              type=\"tel\"\n              value={phone}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              onChange={(evt: InputEventType) => setPhone(evt.target.value)}\n            />\n            <FormHelperText>For example: +380 95 122 0366</FormHelperText>\n          </FormControl>\n          <FormControl isRequired>\n            <FormLabel>Name</FormLabel>\n            <Input\n              type=\"text\"\n              value={name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer\"\n              onChange={(evt: InputEventType) => setName(evt.target.value)}\n            />\n            <FormHelperText>For example: Amalia Rorshekh</FormHelperText>\n          </FormControl>\n\n          <Box textAlign=\"center\" marginY=\"5\">\n            <Button colorScheme=\"blue\" variant=\"solid\" type=\"submit\">\n              Add Contatc\n            </Button>\n          </Box>\n        </form>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddContactSection;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  FormHelperText,\n  Box,\n} from '@chakra-ui/react';\nimport { updateContact } from 'redux/contacts/contacts-operations';\nimport { EditIcon } from '@chakra-ui/icons';\nimport { useState } from 'react';\nimport { useAppDispatch } from 'redux/hooks';\n// import { useDispatch } from 'react-redux';\nimport { INewContact } from 'redux/contacts/contacts-slice';\nimport { InputEventType, SubmitFormEventType } from 'types/commonTypes';\n\ninterface ChangeModalProps {\n  contactId: string;\n  userData: INewContact;\n}\n\nconst ChangeModal: React.FC<ChangeModalProps> = ({ contactId, userData }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [newName, setNewName] = useState(() => userData.name);\n  const [newNumber, setNewNumber] = useState(() => userData.number);\n\n  const dispatch = useAppDispatch();\n\n  const handleConatctChange = (evt: SubmitFormEventType) => {\n    evt.preventDefault();\n    dispatch(\n      updateContact({ name: newName, number: newNumber, id: contactId })\n    );\n    onClose();\n  };\n\n  return (\n    <>\n      <Button variant=\"outline\" ml=\"1.5\" onClick={onOpen}>\n        <EditIcon />\n      </Button>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <form autoComplete=\"false\" onSubmit={handleConatctChange}>\n              <FormControl isRequired>\n                <FormLabel>New Number</FormLabel>\n                <Input\n                  type=\"tel\"\n                  value={newNumber}\n                  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                  onChange={(evt: InputEventType) =>\n                    setNewNumber(evt.target.value)\n                  }\n                />\n                <FormHelperText>For example: +380 95 122 0366</FormHelperText>\n              </FormControl>\n              <FormControl isRequired>\n                <FormLabel>New Name</FormLabel>\n                <Input\n                  type=\"text\"\n                  value={newName}\n                  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer\"\n                  onChange={(evt: InputEventType) =>\n                    setNewName(evt.target.value)\n                  }\n                />\n                <FormHelperText>For example: Amalia Rorshekh</FormHelperText>\n              </FormControl>\n\n              <Box textAlign=\"center\" marginY=\"5\">\n                <Button colorScheme=\"blue\" variant=\"solid\" type=\"submit\">\n                  Change Contact\n                </Button>\n              </Box>\n            </form>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ChangeModal;\n","import { RootState } from \"redux/store\";\n\nexport const selectContacts = (state: RootState) => state.contacts.contacts.items;\n\nexport const selectError = (state: RootState) => state.contacts.contacts.error;\n\nexport const selectLoadingState = (state: RootState) => state.contacts.contacts.isLoading;\n","import { Box, Heading, Input, Button, Text, Skeleton } from '@chakra-ui/react';\nimport ChangeModal from 'components/Modal';\nimport { DeleteIcon, WarningTwoIcon } from '@chakra-ui/icons';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { selectLoadingState } from 'redux/contacts/contacts-selectors';\nimport React, { useState } from 'react';\nimport { useAppDispatch, useAppSelector } from 'redux/hooks';\n// import { useDispatch, useSelector } from 'react-redux';\n\nconst ContactListSection: React.FC = () => {\n  const [filter, setFilter] = useState('');\n\n  const dispatch = useAppDispatch();\n  const contactsList = useAppSelector(selectContacts);\n\n  const isLoading = useAppSelector(selectLoadingState);\n\n  const visibleContacts = contactsList.filter(item =>\n    item.name.toLowerCase().includes(filter)\n  );\n  return (\n    <Box flexGrow=\"1\" display=\"flex\" justifyContent=\"center\">\n      <Box\n        w=\"lg\"\n        h=\"fit-content\"\n        borderRadius=\"lg\"\n        bg=\"gray.700\"\n        paddingY=\"5\"\n        paddingX=\"7\"\n      >\n        <Heading\n          as=\"h2\"\n          mb=\"6\"\n          textAlign=\"center\"\n          fontFamily=\"heading\"\n          fontWeight=\"medium\"\n        >\n          Contact List\n        </Heading>\n        <Text textAlign=\"center\" fontSize=\"lg\" fontWeight=\"light\" color=\"gray\">\n          Search by Name\n        </Text>\n        <Input\n          type=\"text\"\n          value={filter}\n          onChange={(evt: React.ChangeEvent<HTMLInputElement>) =>\n            setFilter(evt.target.value)\n          }\n        />\n        {visibleContacts.length === 0 ? (\n          <Skeleton fadeDuration={2} isLoaded={!isLoading}>\n            <Box mt=\"5\" display=\"flex\" alignItems=\"center\">\n              <Text fontSize=\"2xl\" fontWeight=\"medium\" letterSpacing=\"wide\">\n                List of conatcts is empty\n              </Text>\n              <WarningTwoIcon w=\"6\" h=\"6\" ml=\"4\" color=\"orange.400\" />\n            </Box>\n          </Skeleton>\n        ) : (\n          <ul>\n            {visibleContacts.map(({ name, number, id }) => (\n              <Skeleton fadeDuration={2} isLoaded={!isLoading}>\n                <Box\n                  as=\"li\"\n                  key={id}\n                  display=\"flex\"\n                  justifyContent=\"space-between\"\n                  alignItems=\"baseline\"\n                  mt=\"5\"\n                >\n                  <Text\n                    fontSize=\"2xl\"\n                    fontWeight=\"medium\"\n                    letterSpacing=\"wide\"\n                    display=\"flex\"\n                    flexWrap=\"wrap\"\n                  >\n                    {name}: {number}\n                  </Text>\n                  <Box>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => dispatch(deleteContact(id))}\n                    >\n                      <DeleteIcon />\n                    </Button>\n                    <ChangeModal contactId={id} userData={{ name, number }} />\n                  </Box>\n                </Box>\n              </Skeleton>\n            ))}\n          </ul>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default ContactListSection;\n","import AddContactSection from 'components/AddContactSection';\nimport ContactListSection from 'components/ContactListSection';\nimport { Container, Heading } from '@chakra-ui/react';\nimport { fetchAllContacts } from 'redux/contacts/contacts-operations';\nimport { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\nimport { useAppDispatch } from 'redux/hooks';\n\nconst Contacts: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  return (\n    <Container as=\"main\" bg=\"blue.800\" maxW=\"full\" color=\"white\">\n      <Heading\n        textAlign=\"center\"\n        pt=\"7\"\n        pb=\"20\"\n        fontFamily=\"heading\"\n        fontWeight=\"medium\"\n      >\n        Let`s create new contacts together !\n      </Heading>\n      <Container\n        maxW=\"container.xl\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n      >\n        <AddContactSection />\n        <ContactListSection />\n      </Container>\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["useState","phone","setPhone","name","setName","dispatch","useAppDispatch","flexGrow","display","justifyContent","w","h","borderRadius","bg","paddingY","paddingX","as","mb","textAlign","fontFamily","fontWeight","autoComplete","onSubmit","evt","preventDefault","addContact","number","isRequired","type","value","pattern","title","onChange","target","marginY","colorScheme","variant","contactId","userData","useDisclosure","isOpen","onOpen","onClose","newName","setNewName","newNumber","setNewNumber","ml","onClick","updateContact","id","selectContacts","state","contacts","items","selectLoadingState","isLoading","filter","setFilter","contactsList","useAppSelector","visibleContacts","item","toLowerCase","includes","fontSize","color","length","fadeDuration","isLoaded","mt","alignItems","letterSpacing","map","flexWrap","deleteContact","useEffect","fetchAllContacts","maxW","pt","pb"],"sourceRoot":""}